/*
 * This file is generated by jOOQ.
*/
package db.generated.tables;


import db.generated.Keys;
import db.generated.Test;
import db.generated.tables.records.RisksRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Risks extends TableImpl<RisksRecord> {

    private static final long serialVersionUID = -1313362493;

    /**
     * The reference instance of <code>test.Risks</code>
     */
    public static final Risks RISKS = new Risks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RisksRecord> getRecordType() {
        return RisksRecord.class;
    }

    /**
     * The column <code>test.Risks.id</code>.
     */
    public final TableField<RisksRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>test.Risks.riskName</code>.
     */
    public final TableField<RisksRecord, String> RISKNAME = createField("riskName", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * Create a <code>test.Risks</code> table reference
     */
    public Risks() {
        this("Risks", null);
    }

    /**
     * Create an aliased <code>test.Risks</code> table reference
     */
    public Risks(String alias) {
        this(alias, RISKS);
    }

    private Risks(String alias, Table<RisksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Risks(String alias, Table<RisksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RisksRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_RISKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RisksRecord> getPrimaryKey() {
        return Keys.KEY_RISKS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RisksRecord>> getKeys() {
        return Arrays.<UniqueKey<RisksRecord>>asList(Keys.KEY_RISKS_PRIMARY, Keys.KEY_RISKS_RISKNAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Risks as(String alias) {
        return new Risks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Risks rename(String name) {
        return new Risks(name, null);
    }
}
